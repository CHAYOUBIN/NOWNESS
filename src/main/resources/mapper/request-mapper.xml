<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="request"> <!--highfive.nowness.repository.TestRepository-->

    <resultMap id="repliesResultMap" type="RepliesDTO">
        <id property="id" column="id" />
        <result property="contents_id" column="contents_id" />
        <result property="user_id" column="user_id" />
        <result property="reply" column="reply" />
        <result property="created_datetime" column="created_datetime" />
        <result property="deleted" column="deleted" />
        <result property=" parent_id" column="parent_id" />
    </resultMap>


    <!--글 전체 DTO-->
    <select id="findAll" resultType="requestDTO">
        select * from contents
        where deleted=0
        order by id desc
    </select>

    <!--해당 번호 게시글 상세내용 DTO-->
    <select id="getBoard" resultType="requestDTO">
        select
            *
        from contents where id= #{id}
                        and deleted = 0
    </select>


    <!-- 게시글 전체 (개수) -->
    <select id="getTotalRequestCount" resultType="java.lang.Integer">
        select count(*) from contents
        where deleted=0
    </select>


    <!-- 조회수 1증가 -->
    <update id="updateContentViews" parameterType="java.lang.Integer">
        update contents
        set views = views + 1
        where id = #{id}
    </update>


    <!--해당 게시글 닉네임 찾기 (세부게시글용)-->
    <select id="getNicknameById" parameterType="requestDTO" resultType="String">
        select users.nickname as id
        from users join contents
                        on contents.user_id = users.id
        where contents.id= #{id}
    </select>

    <!--   게시글리스트 닉네임가져오기-->
    <select id="getNickname2" parameterType="requestDTO" resultType="String" useCache="false">
        select users.nickname as nickname
        from users
                 join contents on contents.user_id = users.id
        where contents.id = #{id}
    </select>

    <!--  ajax카테고리 분류시 닉네임가져오기-->
    <select id="getNicknameByUserId" parameterType="int" resultType="String">
        select users.nickname as nickname
        from users
                 join contents on contents.user_id = users.id
        where contents.user_id = #{userId}
            limit 1
    </select>


    <!--리플쓴 유저id로  닉네임 찾기 -->
    <select id="getNickname" parameterType="requestDTO" resultType="String">
        select users.nickname as id
        from users join replies
                        on replies.user_id = users.id
        where replies.id= #{id}
    </select>


    <!--해당 게시글 좋아요 (총 개수)  -->
    <select id="getLikes" resultType="java.lang.Integer">
        select count(*) from likes
        where contents_id = #{id}
    </select>


    <!-- 게시글 삭제 deleted =1로. -->
    <update id="deleteContents" parameterType="java.lang.Integer">
        update contents
        set deleted = 1
        where id = #{id}
    </update>


    <!--카테고리계열  //미완 페이징 불완전. 아직 더 추가해야함.-->
    <!--보드타입으로 분류된 글 갯수-->
    <select id="getRequestsByBoardTypeCount" resultType="java.lang.Integer">
        select count(*) from contents where board_type = #{boardType}
                                        and deleted = 0
    </select>

    <!--페이징 - '맵' 사용. DTO-->
    <select id="boardPagingList" resultType="requestDTO" parameterType="java.util.Map">
        select * from contents where board_type = #{boardtype}
                                 and  deleted=0
        order by id desc limit #{pageIndex}, #{pageSize}

    </select>

    <!--댓글 조회-->
    <select id="getReply" resultType="repliesDTO">
        select * from replies
        where contents_id = #{id}
--           AND deleted=0
        order by parent_id asc
    </select>


    <!--자식 댓글 개수조회(삭제X)-->
    <select id="childCommentsCount" resultType="java.lang.Integer">
        select count(*) from replies
        where parent_id=#{id}
          and deleted=0
    </select>



    <!--    댓글등록-->
    <insert id="addReply" parameterType="replyDATA">
        insert into replies (contents_id, user_id, reply)
        values (#{contentsId}, #{userId}, #{reply})
    </insert>

    <!--    대댓글등록-->
    <insert id="add_reReply" parameterType="replyDATA">
        insert into replies (contents_id, user_id, reply, parent_id)
        values (#{contentsId}, #{userId}, #{reply}, #{parentid})
    </insert>



    <!-- 댓글 삭제 deleted =1로. +내용 -->
    <update id="deleteReply" parameterType="java.lang.Integer">
        update replies
        set deleted = 1
--             ,
--         reply = "삭제된 댓글입니다"
        where id = #{replyId}
    </update>


    <!--    게시글 등록-->
    <insert id="addPost" parameterType="postDATA">
        insert into contents (`user_id`, `contents`, `title`, `board_type`, `locale`, `subcategory`)
        values (#{userId}, #{contents}, #{title}, #{boardType}, #{locale}, #{subcategory})
    </insert>

    <!-- 게시글 저장 후, 글 번호 반환용. -->
    <insert id="addPost2" parameterType="postDATA" useGeneratedKeys="true" keyProperty="id">
        insert into contents (`user_id`, `contents`, `title`, `board_type`, `locale`, `subcategory`)
        values (#{userId}, #{contents}, #{title}, #{boardType}, #{locale}, #{subcategory})
    </insert>



    <!--    게시글 수정등록 -->
    <insert id="updatePost" parameterType="postDATA">
        update contents
        set  `contents` =#{contents}, `title` = #{title}, `board_type` = #{boardType}, `locale` = #{locale}, `subcategory` = #{subcategory}, edit_datetime =now()
        where `id` = #{id}
    </insert>

    <!--    게시글 수정등록22 -->
    <insert id="updatePost2" parameterType="postDATA"  useGeneratedKeys="true" keyProperty="id">
        update contents
        set  `contents` =#{contents}, `title` = #{title}, `board_type` = #{boardType}, `locale` = #{locale}, `subcategory` = #{subcategory}, edit_datetime =now()
        where `id` = #{id}
    </insert>



    <!--ajax테스트중-->
    <!--카테고리분류별 게시글가져오기 DTO //필요파라메터 지역, 섭카테고리-->
    <select id="categoryList" resultType="requestDTO">
        select * from contents
        where board_type=1
          and locale = #{locale}
          and subcategory =#{subcategory}
          and deleted=0
        order by id desc
    </select>

    <!--맵사용 테스트용 카테고리-->
    <select id="categoryListMap" resultType="requestDTO" parameterType="java.util.Map">
        select * from contents
        where board_type=1
          and locale = #{locale}
          and subcategory =#{subcategory}
          and deleted=0
        order by id desc
    </select>


    <!--맵사용 테스트용 카테고리 갯수-->
    <select id="categoryListMapCount" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) from contents
        where board_type=1
          and locale = #{locale}
          and subcategory =#{subcategory}
          and deleted=0
    </select>



<!-- 카테고리별   동적쿼리-->
    <select id="categoryPagingList" resultType="requestDTO" parameterType="java.util.Map">
        select * from contents
        where board_type=1

            <if test="#{locale} != null">
                and locale = #{locale}
            </if>
            <if test="#{subcategory} != null">
                and subcategory =#{subcategory}
            </if>
          and deleted=0
        order by id desc limit #{pageIndex}, #{pageSize}
    </select>


    <!-- 검색 : 해당 글 갯수 가져오기(개수)-->
    <select id="searchListMapCount" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) from contents c
        join users u on c.user_id = u.id
        where c.board_type = 1
        and c.deleted = 0
        <if test="searchType == 'title'">
            and c.title like concat('%', #{searchKeyword}, '%')
        </if>
        <if test="searchType == 'contents'">
            and c.contents like concat('%', #{searchKeyword}, '%')
        </if>
        <if test="searchType == 'user_id'">
            and u.nickname like concat('%', #{searchKeyword}, '%')
        </if>
    </select>


    <!-- 검색 : 해당 글 DTO가져오기.(닉네임포함)-->
    <select id="searchPagingList" resultType="requestDTO" parameterType="java.util.Map">
        select c.* , u.nickname
        from contents c
        join users u on c.user_id = u.id
        where c.board_type = 1
        and c.deleted = 0
        <if test="searchType == 'title'">
            and c.title like concat('%', #{searchKeyword}, '%')
        </if>
        <if test="searchType == 'contents'">
            and c.contents like concat('%', #{searchKeyword}, '%')
        </if>
        <if test="searchType == 'user_id'">
            and u.nickname like concat('%', #{searchKeyword}, '%')
        </if>
        order by id desc limit #{pageIndex}, #{pageSize}
    </select>



    <!-- 해당 게시글 좋아요 기록이 있는지 검사(개수)-->
    <select id="checkIfUserLikedPost" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as like_count
        from contents c
                 join likes l on c.id = l.contents_id
        where c.deleted = 0
          and l.user_id =  #{userId}
          AND c.id = #{contentsid}
    </select>

    <!--  해당 게시글에 좋아요 기록 저장.-->
    <insert id="insertLike" parameterType="java.util.Map">
        insert into likes (contents_id, user_id)
        values  (#{contentsid}, #{userid})
    </insert>



    <!--해당 게시글 댓글 개수 조회-->
    <select id="postRepliesCount" resultType="java.lang.Integer">
        select count(*) from replies
        where contents_id=#{id}
        and deleted=0
    </select>


    <!--  태그저장 -->
    <insert id="addHashtag" parameterType="java.util.List">
        insert into tags (contents_id, tag)
        values
        <foreach collection="list" item="tag" separator=",">
            (#{tag.contentsid}, #{tag.tag})
        </foreach>
    </insert>

    <!--게시물에 해당하는 태그 조회-->
    <select id="getTags" resultType="tagsDTO" parameterType="java.lang.Integer">
        select tags.*
        from contents
                 join tags on tags.contents_id = contents.id
        where contents.id = #{id}
    </select>


    <!--태그 검색 : 해당하는 태그에 대한 게시물 갯수-->
    <select id="searchTagListCount" resultType="java.lang.Integer" parameterType="String">
        select count(*) from contents c
                                 join tags t on t.contents_id = c.id
        where c.board_type = 1
          and c.deleted = 0
          and t.tag= #{tag}
    </select>




        <!-- 태그 검색 : 해당 글 DTO가져오기-->
        <select id="searchPagingTagList" resultType="requestDTO" parameterType="java.util.Map">
            select c.* , u.nickname
            from contents c
                     join tags t on c.id = t.contents_id
                     join users u on c.user_id = u.id
            where c.board_type = 1
              and c.deleted = 0
              and t.tag like  #{tag}
            order by c.id desc limit #{pageIndex}, #{pageSize}
        </select>



    <!--태그삭제 -->
    <delete id="removeTags" parameterType="java.util.List">
        delete from tags
        <where>
            <foreach collection="list" item="tag" separator=" or ">
                contents_id = #{tag.contentsid} and tag = #{tag.tag}
            </foreach>
        </where>
    </delete>

    <!--파일저장-->
    <insert id="saveFileData" parameterType="fileDATA">
        insert into files (contents_id, orgin_name, save_name, path, size, ext)
        values (#{contentsId}, #{orginName}, #{saveName}, #{path}, #{size}, #{ext})
    </insert>


    <!-- Retrieve FileData by fileId파일다운 -->
    <select id="getFileById" resultType="fileDATA">
        select * from files where id = #{fileId}
    </select>

    <!-- 게시물에 해당하는 파일들 -->
    <select id="getFileByContentsId" resultType="fileDATA">
        select * from files where contents_id = #{id}
    </select>

    <!-- 파일 1개 삭제(id로) -->
    <delete id="deleteFileById">
        delete from files where id = #{fileId}
    </delete>


    <!--파일 여러개 삭제 -->
    <delete id="deleteFilesByIds" parameterType="java.util.List">
        delete from files
        where id in
        <foreach collection="list" item="fileId" separator="," open="(" close=")">
            #{fileId}
        </foreach>
    </delete>




</mapper>

